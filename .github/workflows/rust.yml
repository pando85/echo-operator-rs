name: Rust

on:
  push:
    branches: [master]
    tags:
      - v*
  pull_request:
    branches: [master]

jobs:
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install fmt with stable toolchain
        id: toolchain
        uses: dtolnay/rust-toolchain@stable

      - run: rustup override set ${{steps.toolchain.outputs.name}}
      - run: rustup component add rustfmt

      - name: Run cargo fmt
        run: cargo fmt --all -- --check

  clippy:
    name: Clipply
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install clippy with stable toolchain
        id: toolchain
        uses: dtolnay/rust-toolchain@stable

      - run: rustup override set ${{steps.toolchain.outputs.name}}
      - run: rustup component add clippy
      - run: make crd-code

      - uses: clechasseur/rs-clippy-check@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --locked --all-targets --all-features

  build:
    strategy:
      fail-fast: false
      matrix:
        job:
          - {os: ubuntu-24.04, target: aarch64-unknown-linux-gnu, use-cross: true}
          - {os: ubuntu-24.04, target: x86_64-unknown-linux-gnu}
    name: (${{ matrix.job.os }}) ${{ matrix.job.target }}
    runs-on: ${{ matrix.job.os }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Install prerequisites
        shell: bash
        run: |
          case ${{ matrix.job.target }} in
            arm-unknown-linux-*) sudo apt-get -y update ; sudo apt-get -y install gcc-arm-linux-gnueabihf ;;
            aarch64-unknown-linux-gnu) sudo apt-get -y update ; sudo apt-get -y install gcc-aarch64-linux-gnu ;;
          esac

      - uses: Swatinem/rust-cache@v2
        with:
          # not reuse cache between different targets:
          # https://github.com/cross-rs/cross/issues/39#issuecomment-270684223
          key: ${{ matrix.job.target }}

      - name: Install Rust toolchain
        id: toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.job.target }}

      - run: rustup override set ${{steps.toolchain.outputs.name}}
      - run: make crd-code

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.job.use-cross }}
          command: test
          args: --locked --target=${{ matrix.job.target }}

      - name: Run integration tests
        run: make integration-tests

      - name: Create kind cluster with 5 nodes
        uses: helm/kind-action@v1.10.0
        with:
          install_only: true

      - name: Install helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      - name: Run e2e tests
        run: make e2e-tests

      - name: Extract crate information
        shell: bash
        run: |
          echo "PROJECT_NAME=timer" >> $GITHUB_ENV
          echo "PROJECT_VERSION=$(sed -n 's/^version = "\(.*\)"/\1/p' kaniop_core/Cargo.toml | head -n1)" >> $GITHUB_ENV

      - name: Publish crates
        if: startsWith(github.ref, 'refs/tags/')
        env:
          CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        shell: bash
        run: |
          cargo login "${CRATES_IO_TOKEN}"
          make publish
